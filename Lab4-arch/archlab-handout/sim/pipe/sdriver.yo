                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4f004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f64804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f71804000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len  
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion    #%rax = count
                            | 	# Loop header
                            | 	#xorq %rax,%rax		# count = 0;
                            | 	#andq %rdx,%rdx		# len <= 0?
0x032: c0f2f6ffffffffffffff | 	iaddq $-10, %rdx        #len <10
0x03c: 720602000000000000   |         jl Root                # if so goto Root
                            |  	#jle Done		# if so, goto Done:
                            | 
0x045: 50a70000000000000000 | Loop:	mrmovq (%rdi), %r10	# read val from src...
0x04f: 50b70800000000000000 | 	mrmovq 8(%rdi),%r11     # read val from the next value of the src
0x059: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x063: 62aa                 | 	andq   %r10, %r10		# val <= 0?
0x065: 717800000000000000   | 	jle Npos		# if so, goto Npos:
0x06e: c0f00100000000000000 |         iaddq  $0x1 ,%rax         # count++
                            |    
                            | #	irmovq $1, %r10
                            | #	addq %r10, %rax		# count++
0x078: 50a71000000000000000 | Npos:	mrmovq 16(%rdi), %r10
0x082: 40b60800000000000000 | 	rmmovq %r11,    8(%rsi) #and store it to dst the next
0x08c: 62bb                 |         andq   %r11,     %r11    # if len<=0
0x08e: 71a100000000000000   |         jle    Npos1
0x097: c0f00100000000000000 |         iaddq  $0x1, %rax         #count++
0x0a1:                      | Npos1:  
0x0a1: 50b71800000000000000 |  	mrmovq 24(%rdi),  %r11  
0x0ab: 40a61000000000000000 |         rmmovq %r10,     16(%rsi)
0x0b5: 62aa                 |         andq   %r10,     %r10   #if val <=0
0x0b7: 71ca00000000000000   |         jle    Npos3   
0x0c0: c0f00100000000000000 |         iaddq  $1,       %rax   #count ++ 
                            | 
0x0ca:                      | Npos3:
0x0ca: 50a72000000000000000 |         mrmovq 32(%rdi),  %r10
0x0d4: 40b61800000000000000 |         rmmovq %r11,     24(%rsi)
0x0de: 62bb                 |         andq   %r11,     %r11   #if val <=0
0x0e0: 71f300000000000000   |         jle    Npos4
0x0e9: c0f00100000000000000 |         iaddq  $1,       %rax   #count ++ 
                            | 
0x0f3:                      | Npos4:
0x0f3: 50b72800000000000000 |         mrmovq 40(%rdi), %r11 
0x0fd: 40a62000000000000000 |         rmmovq %r10,    32(%rsi) 
0x107: 62aa                 |         andq   %r10,    %r10
0x109: 711c01000000000000   |         jle    Npos5
0x112: c0f00100000000000000 |         iaddq  $1,      %rax
                            | 
0x11c:                      | Npos5:
0x11c: 50a73000000000000000 |     	mrmovq 48(%rdi),  %r10
0x126: 40b62800000000000000 |         rmmovq %r11,     40(%rsi)
0x130: 62bb                 | 	andq   %r11,     %r11
0x132: 714501000000000000   |         jle    Npos6
0x13b: c0f00100000000000000 |         iaddq   $1,       %rax
                            |       
0x145:                      | Npos6:
0x145: 50b73800000000000000 |    	mrmovq 56(%rdi),  %r11
0x14f: 40a63000000000000000 | 	rmmovq %r10,     48(%rsi)
0x159: 62aa                 |         andq   %r10,     %r10
0x15b: 716e01000000000000   |         jle    Npos7
0x164: c0f00100000000000000 |         iaddq   $1,       %rax
                            | 
0x16e:                      | Npos7:
0x16e: 50a74000000000000000 | 	mrmovq 64(%rdi),  %r10
0x178: 40b63800000000000000 | 	rmmovq %r11,      56(%rsi)
0x182: 62bb                 |  	andq   %r11,      %r11
0x184: 719701000000000000   |    	jle    Npos8
0x18d: c0f00100000000000000 | 	iaddq  $1,	  %rax
                            | 
0x197:                      | Npos8:
0x197: 50b74800000000000000 | 	mrmovq 72(%rdi), %r11
0x1a1: 40a64000000000000000 | 	rmmovq %r10,     64(%rsi)
0x1ab: 62aa                 |  	andq   %r10,     %r10
0x1ad: 71c001000000000000   | 	jle    Npos9
0x1b6: c0f00100000000000000 |  	iaddq  $1,       %rax
                            | 
0x1c0:                      | Npos9:
0x1c0: 40b64800000000000000 |         rmmovq %r11,     72(%rsi)
0x1ca: 62bb                 | 	andq   %r11,	 %r11
0x1cc: 71df01000000000000   | 	jle    Npos10              #处理最后一个元素
0x1d5: c0f00100000000000000 | 	iaddq  $0x1,       %rax
                            | 
0x1df:                      | Npos10:
0x1df: c0f75000000000000000 |    	iaddq  $0x50,    %rdi     #src+
0x1e9: c0f65000000000000000 | 	iaddq  $0x50,    %rsi     #dst++
0x1f3: c0f2f6ffffffffffffff | 	iaddq  $-10,     %rdx     # len>10 
0x1fd: 754500000000000000   | 	jge    Loop
                            | 
0x206:                      | Root:   #len <10
0x206: c0f20700000000000000 |         iaddq  $7,       %rdx      #len<=3
0x210: 722b02000000000000   |   	jl     left               #len <3
0x219: 765202000000000000   |         jg     right	          #len >3
0x222: 738903000000000000   | 	je     Loop3              #len ==3
                            |         
                            | 
0x22b:                      | left:
0x22b: c0f20200000000000000 | 	iaddq  $2,       %rdx    #len==1
0x235: 73db03000000000000   | 	je     Loop1             #len ==1
0x23e: c0f2ffffffffffffffff |         iaddq  $-1,      %rdx    #len==2
0x248: 73b203000000000000   |         je     Loop2             #len==2
0x251: 90                   |         ret                      #len ==0
                            | 
0x252:                      | right:
0x252: c0f2fdffffffffffffff | 	iaddq  $-3,       %rdx   
0x25c: 768a02000000000000   |         jg     right2            #len >6
0x265: 730e03000000000000   |         je     Loop6             #len ==6
0x26e: c0f20100000000000000 | 	iaddq  $1,       %rdx    #len  <6  +1 <=5
0x278: 733703000000000000   |         je     Loop5             #rightleft   len ==5
0x281: 706003000000000000   |         jmp    Loop4             #len==4
                            |  	
0x28a:                      | right2:
0x28a: c0f2feffffffffffffff |         iaddq  $-2,       %rdx    
0x294: 72e502000000000000   | 	jl     Loop7             #len <=7
0x29d: 73bc02000000000000   |         je     Loop8             #len==8
                            | 
0x2a6:                      | Loop9:  #len >=9
0x2a6: 50b74000000000000000 |         mrmovq 64(%rdi),  %r11   # read val from src
0x2b0: 40b64000000000000000 | 	rmmovq %r11,   	  64(%rsi) #store in the dst
0x2ba: 62bb                 | 	andq   %r11,      %r11     #if val <0
                            | 
0x2bc: 50b73800000000000000 | Loop8:  mrmovq 56(%rdi),  %r11     #len ==8  read val from src
                            | 	#rmmovq %r11,      56(%rsi) 
                            |         #andq   %r11,      %r11    #val <=0
0x2c6: 71d902000000000000   | 	jle    Loop82
0x2cf: c0f00100000000000000 | 	iaddq  $1,        %rax    #count ++
0x2d9:                      | Loop82:
0x2d9: 40b63800000000000000 | 	rmmovq %r11,      56(%rsi)
                            | 	#mrmovq 48(%rdi),  %r11
                            | 	#rmmovq %r11,      %48(%rsi)  #store the val to dst
0x2e3: 62bb                 | 	andq   %r11,      %r11
0x2e5:                      | Loop7:
0x2e5: 50b73000000000000000 | 	mrmovq 48(%rdi),  %r11
0x2ef: 710203000000000000   | 	jle    Loop72
0x2f8: c0f00100000000000000 | 	iaddq  $1,        %rax
                            | 
0x302:                      | Loop72:
0x302: 40b63000000000000000 | 	rmmovq %r11,	  48(%rsi)
0x30c: 62bb                 |         andq   %r11,      %r11
                            | 
0x30e:                      | Loop6:
0x30e: 50b72800000000000000 | 	mrmovq 40(%rdi), %r11
0x318: 712b03000000000000   | 	jle    Loop62
0x321: c0f00100000000000000 | 	iaddq  $1,        %rax
                            | 
0x32b: 40b62800000000000000 | Loop62: rmmovq %r11,     40(%rsi)
0x335: 62bb                 | 	andq   %r11,     %r11    	
                            | 		
0x337: 50b72000000000000000 | Loop5:  mrmovq 32(%rdi), %r11
0x341: 715403000000000000   | 	jle    Loop52
0x34a: c0f00100000000000000 | 	iaddq  $0x1,       %rax
                            | 
0x354:                      | Loop52:
0x354: 40b62000000000000000 | 	rmmovq %r11,     32(%rsi)
0x35e: 62bb                 |         andq   %r11,     %r11
                            | 
0x360:                      | Loop4:
0x360: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x36a: 717d03000000000000   | 	jle    Loop42
0x373: c0f00100000000000000 | 	iaddq  $1,       %rax
                            | 
0x37d:                      | Loop42:
0x37d: 40b61800000000000000 | 	rmmovq %r11,    24(%rsi)
0x387: 62bb                 | 	andq   %r11,    %r11
                            | 
0x389: 50b71000000000000000 | Loop3:  mrmovq 16(%rdi), %r11
0x393: 71a603000000000000   | 	jle    Loop32
0x39c: c0f00100000000000000 |      	iaddq  $0x1,	%rax
                            | 
0x3a6:                      | Loop32:
0x3a6: 40b61000000000000000 | 	rmmovq %r11,   16(%rsi) 		
0x3b0: 62bb                 | 	andq   %r11,   %r11
                            | 
0x3b2:                      | Loop2:
0x3b2: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11
0x3bc: 71cf03000000000000   | 	jle    Loop21
0x3c5: c0f00100000000000000 | 	iaddq  $0x1,	%rax
                            | 
0x3cf:                      | Loop21:
0x3cf: 40b60800000000000000 |         rmmovq  %r11,  8(%rsi)
0x3d9: 62bb                 | 	andq    %r11,  %r11
                            | 
0x3db:                      | Loop1:  
0x3db: 50b70000000000000000 | 	mrmovq  (%rdi),  %r11
0x3e5: 71f803000000000000   | 	jle     Loop11
0x3ee: c0f00100000000000000 |        iaddq   $0x1,    %rax
                            | 
0x3f8:                      | Loop11:
0x3f8: 40b60000000000000000 | 	rmmovq  %r11,  (%rsi)
0x402: 62bb                 | 	andq    %r11,  %r11
0x404: 711704000000000000   |         jle     Done
0x40d: c0f00100000000000000 |         iaddq   $0x1,    %rax
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x417:                      | Done:
0x417: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x418:                      | End:
                            | #/* $end ncopy-ys */
0x418:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x418:                      | 	.align 8
0x418:                      | src:
0x418: 0100000000000000     | 	.quad 1
0x420: 0200000000000000     | 	.quad 2
0x428: fdffffffffffffff     | 	.quad -3
0x430: fcffffffffffffff     | 	.quad -4
0x438: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x440:                      | 	.align 16
0x440:                      | Predest:
0x440: fadebc0000000000     | 	.quad 0xbcdefa
0x448:                      | dest:
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468:                      | Postdest:
0x468: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x470:                      | .align 8
                            | # Run time stack
0x470: 0000000000000000     | 	.quad 0
0x478: 0000000000000000     | 	.quad 0
0x480: 0000000000000000     | 	.quad 0
0x488: 0000000000000000     | 	.quad 0
0x490: 0000000000000000     | 	.quad 0
0x498: 0000000000000000     | 	.quad 0
0x4a0: 0000000000000000     | 	.quad 0
0x4a8: 0000000000000000     | 	.quad 0
0x4b0: 0000000000000000     | 	.quad 0
0x4b8: 0000000000000000     | 	.quad 0
0x4c0: 0000000000000000     | 	.quad 0
0x4c8: 0000000000000000     | 	.quad 0
0x4d0: 0000000000000000     | 	.quad 0
0x4d8: 0000000000000000     | 	.quad 0
0x4e0: 0000000000000000     | 	.quad 0
0x4e8: 0000000000000000     | 	.quad 0
                            | 
0x4f0:                      | Stack:
