#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len  
ncopy:

##################################################################
# You can modify this portion    #%rax = count
	# Loop header
	#xorq %rax,%rax		# count = 0;
	#andq %rdx,%rdx		# len <= 0?
	iaddq $-10, %rdx        #len <10
        jl Root                # if so goto Root
 	#jle Done		# if so, goto Done:

Loop:	mrmovq (%rdi), %r10	# read val from src...
	mrmovq 8(%rdi),%r11     # read val from the next value of the src
	rmmovq %r10, (%rsi)	# ...and store it to dst
	andq   %r10, %r10		# val <= 0?
	jle Npos		# if so, goto Npos:
        iaddq  $0x1 ,%rax         # count++
   
#	irmovq $1, %r10
#	addq %r10, %rax		# count++
Npos:	mrmovq 16(%rdi), %r10
	rmmovq %r11,    8(%rsi) #and store it to dst the next
        andq   %r11,     %r11    # if len<=0
        jle    Npos1
        iaddq  $0x1, %rax         #count++
Npos1:  
 	mrmovq 24(%rdi),  %r11  
        rmmovq %r10,     16(%rsi)
        andq   %r10,     %r10   #if val <=0
        jle    Npos3   
        iaddq  $1,       %rax   #count ++ 

Npos3:
        mrmovq 32(%rdi),  %r10
        rmmovq %r11,     24(%rsi)
        andq   %r11,     %r11   #if val <=0
        jle    Npos4
        iaddq  $1,       %rax   #count ++ 

Npos4:
        mrmovq 40(%rdi), %r11 
        rmmovq %r10,    32(%rsi) 
        andq   %r10,    %r10
        jle    Npos5
        iaddq  $1,      %rax

Npos5:
    	mrmovq 48(%rdi),  %r10
        rmmovq %r11,     40(%rsi)
	andq   %r11,     %r11
        jle    Npos6
        iaddq   $1,       %rax
      
Npos6:
   	mrmovq 56(%rdi),  %r11
	rmmovq %r10,     48(%rsi)
        andq   %r10,     %r10
        jle    Npos7
        iaddq   $1,       %rax

Npos7:
	mrmovq 64(%rdi),  %r10
	rmmovq %r11,      56(%rsi)
 	andq   %r11,      %r11
   	jle    Npos8
	iaddq  $1,	  %rax

Npos8:
	mrmovq 72(%rdi), %r11
	rmmovq %r10,     64(%rsi)
 	andq   %r10,     %r10
	jle    Npos9
 	iaddq  $1,       %rax

Npos9:
        rmmovq %r11,     72(%rsi)
	andq   %r11,	 %r11
	jle    Npos10              #处理最后一个元素
	iaddq  $0x1,       %rax

Npos10:
   	iaddq  $0x50,    %rdi     #src+
	iaddq  $0x50,    %rsi     #dst++
	iaddq  $-10,     %rdx     # len>10 
	jge    Loop

Root:   #len <10
        iaddq  $7,       %rdx      #len<=3
  	jl     left               #len <3
        jg     right	          #len >3
	je     Loop3              #len ==3
        

left:
	iaddq  $2,       %rdx    #len==1
	je     Loop1             #len ==1
        iaddq  $-1,      %rdx    #len==2
        je     Loop2             #len==2
        ret                      #len ==0

right:
	iaddq  $-3,       %rdx   
        jg     right2            #len >6
        je     Loop6             #len ==6
	iaddq  $1,       %rdx    #len  <6  +1 <=5
        je     Loop5             #rightleft   len ==5
        jmp    Loop4             #len==4
 	
right2:
        iaddq  $-2,       %rdx    
	jl     Loop7             #len <=7
        je     Loop8             #len==8

Loop9:  #len >=9
        mrmovq 64(%rdi),  %r11   # read val from src
	rmmovq %r11,   	  64(%rsi) #store in the dst
	andq   %r11,      %r11     #if val <0

Loop8:  mrmovq 56(%rdi),  %r11     #len ==8  read val from src
	#rmmovq %r11,      56(%rsi) 
        #andq   %r11,      %r11    #val <=0
	jle    Loop82
	iaddq  $1,        %rax    #count ++
Loop82:
	rmmovq %r11,      56(%rsi)
	#mrmovq 48(%rdi),  %r11
	#rmmovq %r11,      %48(%rsi)  #store the val to dst
	andq   %r11,      %r11
Loop7:
	mrmovq 48(%rdi),  %r11
	jle    Loop72
	iaddq  $1,        %rax

Loop72:
	rmmovq %r11,	  48(%rsi)
        andq   %r11,      %r11

Loop6:
	mrmovq 40(%rdi), %r11
	jle    Loop62
	iaddq  $1,        %rax

Loop62: rmmovq %r11,     40(%rsi)
	andq   %r11,     %r11    	
		
Loop5:  mrmovq 32(%rdi), %r11
	jle    Loop52
	iaddq  $0x1,       %rax

Loop52:
	rmmovq %r11,     32(%rsi)
        andq   %r11,     %r11

Loop4:
	mrmovq 24(%rdi), %r11
	jle    Loop42
	iaddq  $1,       %rax

Loop42:
	rmmovq %r11,    24(%rsi)
	andq   %r11,    %r11

Loop3:  mrmovq 16(%rdi), %r11
	jle    Loop32
     	iaddq  $0x1,	%rax

Loop32:
	rmmovq %r11,   16(%rsi) 		
	andq   %r11,   %r11

Loop2:
	mrmovq 8(%rdi), %r11
	jle    Loop21
	iaddq  $0x1,	%rax

Loop21:
        rmmovq  %r11,  8(%rsi)
	andq    %r11,  %r11

Loop1:  
	mrmovq  (%rdi),  %r11
	jle     Loop11
       iaddq   $0x1,    %rax

Loop11:
	rmmovq  %r11,  (%rsi)
	andq    %r11,  %r11
        jle     Done
        iaddq   $0x1,    %rax


##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
